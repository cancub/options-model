#! /home/alfred/anaconda3/bin/python
import argparse
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
import pandas as pd
import sys
import trade_processing as tp

parser = argparse.ArgumentParser()
parser.add_argument('-o', '--option', choices=['c', 'p', 'call', 'put'])
parser.add_argument('-d', '--direction', choices=['bull', 'bear'])
parser.add_argument('-c', '--max-cost', type=float,
    help='The maximum cost to open the trade.')
parser.add_argument('-p', '--min-profit', type=float,
    help='The minimum profit for the data to display')
parser.add_argument('-t', '--dte', nargs=2, type=int, metavar=('MIN', 'MAX'),
    help=('The minimum and maximum number of days until the expiry for the '
          'trade, respectively, from when the trade is made. Use -1 for either '
          'value to ignore them.'))
parser.add_argument('-s', '--show-stats', action='store_true',
    help='Display the plots for credits received at open and maximum profit')
parser.add_argument('-i', '--show-plots', action='store_true',
    help='Display the stats for the specified data')
parser.add_argument('-b', '--bins', type=int, default=40,
    help='Number of bins to use for plots')
parser.add_argument('-v', '--verbose', action='store_true',
    help='Display the information about data collection.')
parser.add_argument('ticker', metavar='TICKER')
parser.add_argument('expiry', metavar='YYYY-MM-DD',
    type=lambda x: datetime.strptime(x, '%Y-%m-%d'))

args = parser.parse_args()

TRADES_DIR = 'trades'
PICKLES_DIR = 'testing/pickles'

def generate_trades(ticker, expiry):
    trades = tp.collect_spreads(
        data_path=os.path.join(PICKLES_DIR, str(expiry), ticker),
        num_procs=10,
        verbose=args.verbose,
    )
    trades.to_pickle(
        os.path.join(TRADES_DIR, '{}_{}_spreads'.format(ticker, expiry)))

    return trades

df_path = os.path.join(
    TRADES_DIR, '{}_{}_spreads'.format(args.ticker.upper(), args.expiry.date()))

if not os.path.exists(df_path):
    df = generate_trades(args.ticker.upper(), args.expiry.date())
else:
    df = pd.read_pickle(df_path)

if args.max_cost is not None:
    df = df[df['open_credit'] > -args.max_cost]
if args.option is not None:
    df = df[df['option'] == args.option.upper()[0]]
if args.direction is not None:
    df = df[df['direction'] == args.direction]

if args.dte is not None:
    # Check minimum
    if args.dte[0] != -1:
        df = df[:str(args.expiry - timedelta(days=args.dte[0]))]
    # Check maximum
    if args.dte[1] != -1:
        df = df[str(args.expiry - timedelta(days=args.dte[0])):]

if len(df) == 0:
    print('Zero trades that match this criteria')
    sys.exit(0)

if args.show_stats:
    print(df['max_profit'].describe())

if args.show_plots:
    df.hist(
        column=['open_credit', 'max_profit'],
        sharey=True,
        bins=args.bins,
    )
    plt.show()
