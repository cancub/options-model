#! /home/alfred/anaconda3/bin/python
import argparse
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
import pandas as pd
import sys
import trade_processing as tp

import utils
import config

def string_to_datetime(string):
    return datetime.strptime(string, '%Y-%m-%d')

parser = argparse.ArgumentParser()
parser.add_argument(
    '-x', '--expiry', metavar='YYYY-MM-DD', type=string_to_datetime)
parser.add_argument('-o', '--option', choices=['c', 'p', 'call', 'put'])
parser.add_argument('-d', '--direction', choices=['bull', 'bear'])
parser.add_argument(
    '-c', '--max-margin', type=float,
    help='The maximum margin to open the trade.')
parser.add_argument(
    '-p', '--min-profit', type=float,
    help='The minimum profit for the data to display')
parser.add_argument(
    '-t', '--dte', nargs=2, type=int, metavar=('MIN', 'MAX'),
    help=('The minimum and maximum number of days until the expiry for the '
          'trade, respectively, from when the trade is made. Use -1 for either '
          'value to ignore them.'))
parser.add_argument(
    '-s', '--stats', action='store_true',
    help='Display the plots for credits received at open and maximum profit')
parser.add_argument(
    '-w', '--winners', type=float,
    help='Print the number of trades where more than $100 was made')
parser.add_argument(
    '-l', '--plots', action='store_true',
    help='Display the stats for the specified data')
parser.add_argument(
    '-b', '--bins', type=int, default=40,
    help='Number of bins to use for plots')
parser.add_argument(
    '-v', '--verbose', action='store_true',
    help='Display the information about data collection.')

parser.add_argument('ticker', metavar='TICKER')

args = parser.parse_args()

ticker = args.ticker.upper()

df = utils.load_spreads(ticker, str(args.expiry.date()))

if args.max_margin is not None:
    df = df[df['open_margin'] < args.max_margin]
if args.option is not None:
    df = df[df['option'] == args.option.upper()[0]]
if args.direction is not None:
    df = df[df['direction'] == args.direction]

if args.dte is not None:
    # Check minimum
    if args.dte[0] != -1:
        df = df[:str(args.expiry - timedelta(days=args.dte[0]))]
    # Check maximum
    if args.dte[1] != -1:
        df = df[str(args.expiry - timedelta(days=args.dte[0])):]

total_trades = len(df)

if total_trades == 0:
    print('Zero trades that match this criteria')
    sys.exit(0)

if args.winners is not None:
    total_winners = len(
        df[df['max_profit'] > (args.winners + utils.calculate_fee(1,True))])
    print(
        '{} winning trades out of {} made ({:.2%})'.format(
            total_winners, total_trades, total_winners/total_trades))

if args.stats:
    print(df['max_profit'].describe())

if args.plots:
    df.hist(
        column=['open_credit', 'open_margin', 'max_profit'],
        sharey=True,
        bins=args.bins,
    )
    plt.show()
